// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	sql "github.com/rodericusifo/fiber-template/internal/app/model/database/sql"

	types "github.com/rodericusifo/fiber-template/pkg/types"
)

// IPermissionResource is an autogenerated mock type for the IPermissionResource type
type IPermissionResource struct {
	mock.Mock
}

type IPermissionResource_Expecter struct {
	mock *mock.Mock
}

func (_m *IPermissionResource) EXPECT() *IPermissionResource_Expecter {
	return &IPermissionResource_Expecter{mock: &_m.Mock}
}

// FirstPermission provides a mock function with given fields: query
func (_m *IPermissionResource) FirstPermission(query *types.QuerySQL) (*sql.Permission, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for FirstPermission")
	}

	var r0 *sql.Permission
	var r1 error
	if rf, ok := ret.Get(0).(func(*types.QuerySQL) (*sql.Permission, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(*types.QuerySQL) *sql.Permission); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Permission)
		}
	}

	if rf, ok := ret.Get(1).(func(*types.QuerySQL) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IPermissionResource_FirstPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FirstPermission'
type IPermissionResource_FirstPermission_Call struct {
	*mock.Call
}

// FirstPermission is a helper method to define mock.On call
//   - query *types.QuerySQL
func (_e *IPermissionResource_Expecter) FirstPermission(query interface{}) *IPermissionResource_FirstPermission_Call {
	return &IPermissionResource_FirstPermission_Call{Call: _e.mock.On("FirstPermission", query)}
}

func (_c *IPermissionResource_FirstPermission_Call) Run(run func(query *types.QuerySQL)) *IPermissionResource_FirstPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.QuerySQL))
	})
	return _c
}

func (_c *IPermissionResource_FirstPermission_Call) Return(_a0 *sql.Permission, _a1 error) *IPermissionResource_FirstPermission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IPermissionResource_FirstPermission_Call) RunAndReturn(run func(*types.QuerySQL) (*sql.Permission, error)) *IPermissionResource_FirstPermission_Call {
	_c.Call.Return(run)
	return _c
}

// NewIPermissionResource creates a new instance of IPermissionResource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIPermissionResource(t interface {
	mock.TestingT
	Cleanup(func())
}) *IPermissionResource {
	mock := &IPermissionResource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
