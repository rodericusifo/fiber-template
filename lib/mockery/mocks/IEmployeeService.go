// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	input "github.com/rodericusifo/fiber-template/internal/app/core/employee/service/dto/input"
	mock "github.com/stretchr/testify/mock"

	output "github.com/rodericusifo/fiber-template/internal/app/core/employee/service/dto/output"

	types "github.com/rodericusifo/fiber-template/pkg/types"
)

// IEmployeeService is an autogenerated mock type for the IEmployeeService type
type IEmployeeService struct {
	mock.Mock
}

type IEmployeeService_Expecter struct {
	mock *mock.Mock
}

func (_m *IEmployeeService) EXPECT() *IEmployeeService_Expecter {
	return &IEmployeeService_Expecter{mock: &_m.Mock}
}

// CreateEmployee provides a mock function with given fields: payload
func (_m *IEmployeeService) CreateEmployee(payload *input.CreateEmployeeDTO) error {
	ret := _m.Called(payload)

	if len(ret) == 0 {
		panic("no return value specified for CreateEmployee")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*input.CreateEmployeeDTO) error); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IEmployeeService_CreateEmployee_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEmployee'
type IEmployeeService_CreateEmployee_Call struct {
	*mock.Call
}

// CreateEmployee is a helper method to define mock.On call
//   - payload *input.CreateEmployeeDTO
func (_e *IEmployeeService_Expecter) CreateEmployee(payload interface{}) *IEmployeeService_CreateEmployee_Call {
	return &IEmployeeService_CreateEmployee_Call{Call: _e.mock.On("CreateEmployee", payload)}
}

func (_c *IEmployeeService_CreateEmployee_Call) Run(run func(payload *input.CreateEmployeeDTO)) *IEmployeeService_CreateEmployee_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*input.CreateEmployeeDTO))
	})
	return _c
}

func (_c *IEmployeeService_CreateEmployee_Call) Return(_a0 error) *IEmployeeService_CreateEmployee_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IEmployeeService_CreateEmployee_Call) RunAndReturn(run func(*input.CreateEmployeeDTO) error) *IEmployeeService_CreateEmployee_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEmployee provides a mock function with given fields: payload
func (_m *IEmployeeService) DeleteEmployee(payload *input.DeleteEmployeeDTO) error {
	ret := _m.Called(payload)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEmployee")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*input.DeleteEmployeeDTO) error); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IEmployeeService_DeleteEmployee_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEmployee'
type IEmployeeService_DeleteEmployee_Call struct {
	*mock.Call
}

// DeleteEmployee is a helper method to define mock.On call
//   - payload *input.DeleteEmployeeDTO
func (_e *IEmployeeService_Expecter) DeleteEmployee(payload interface{}) *IEmployeeService_DeleteEmployee_Call {
	return &IEmployeeService_DeleteEmployee_Call{Call: _e.mock.On("DeleteEmployee", payload)}
}

func (_c *IEmployeeService_DeleteEmployee_Call) Run(run func(payload *input.DeleteEmployeeDTO)) *IEmployeeService_DeleteEmployee_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*input.DeleteEmployeeDTO))
	})
	return _c
}

func (_c *IEmployeeService_DeleteEmployee_Call) Return(_a0 error) *IEmployeeService_DeleteEmployee_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IEmployeeService_DeleteEmployee_Call) RunAndReturn(run func(*input.DeleteEmployeeDTO) error) *IEmployeeService_DeleteEmployee_Call {
	_c.Call.Return(run)
	return _c
}

// GetEmployee provides a mock function with given fields: payload
func (_m *IEmployeeService) GetEmployee(payload *input.GetEmployeeDTO) (output.GetEmployeeDTO, error) {
	ret := _m.Called(payload)

	if len(ret) == 0 {
		panic("no return value specified for GetEmployee")
	}

	var r0 output.GetEmployeeDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(*input.GetEmployeeDTO) (output.GetEmployeeDTO, error)); ok {
		return rf(payload)
	}
	if rf, ok := ret.Get(0).(func(*input.GetEmployeeDTO) output.GetEmployeeDTO); ok {
		r0 = rf(payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(output.GetEmployeeDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(*input.GetEmployeeDTO) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IEmployeeService_GetEmployee_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEmployee'
type IEmployeeService_GetEmployee_Call struct {
	*mock.Call
}

// GetEmployee is a helper method to define mock.On call
//   - payload *input.GetEmployeeDTO
func (_e *IEmployeeService_Expecter) GetEmployee(payload interface{}) *IEmployeeService_GetEmployee_Call {
	return &IEmployeeService_GetEmployee_Call{Call: _e.mock.On("GetEmployee", payload)}
}

func (_c *IEmployeeService_GetEmployee_Call) Run(run func(payload *input.GetEmployeeDTO)) *IEmployeeService_GetEmployee_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*input.GetEmployeeDTO))
	})
	return _c
}

func (_c *IEmployeeService_GetEmployee_Call) Return(_a0 output.GetEmployeeDTO, _a1 error) *IEmployeeService_GetEmployee_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IEmployeeService_GetEmployee_Call) RunAndReturn(run func(*input.GetEmployeeDTO) (output.GetEmployeeDTO, error)) *IEmployeeService_GetEmployee_Call {
	_c.Call.Return(run)
	return _c
}

// GetEmployees provides a mock function with given fields: payload
func (_m *IEmployeeService) GetEmployees(payload *input.GetEmployeesDTO) (output.GetEmployeesDTO, *types.Meta, error) {
	ret := _m.Called(payload)

	if len(ret) == 0 {
		panic("no return value specified for GetEmployees")
	}

	var r0 output.GetEmployeesDTO
	var r1 *types.Meta
	var r2 error
	if rf, ok := ret.Get(0).(func(*input.GetEmployeesDTO) (output.GetEmployeesDTO, *types.Meta, error)); ok {
		return rf(payload)
	}
	if rf, ok := ret.Get(0).(func(*input.GetEmployeesDTO) output.GetEmployeesDTO); ok {
		r0 = rf(payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(output.GetEmployeesDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(*input.GetEmployeesDTO) *types.Meta); ok {
		r1 = rf(payload)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*types.Meta)
		}
	}

	if rf, ok := ret.Get(2).(func(*input.GetEmployeesDTO) error); ok {
		r2 = rf(payload)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IEmployeeService_GetEmployees_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEmployees'
type IEmployeeService_GetEmployees_Call struct {
	*mock.Call
}

// GetEmployees is a helper method to define mock.On call
//   - payload *input.GetEmployeesDTO
func (_e *IEmployeeService_Expecter) GetEmployees(payload interface{}) *IEmployeeService_GetEmployees_Call {
	return &IEmployeeService_GetEmployees_Call{Call: _e.mock.On("GetEmployees", payload)}
}

func (_c *IEmployeeService_GetEmployees_Call) Run(run func(payload *input.GetEmployeesDTO)) *IEmployeeService_GetEmployees_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*input.GetEmployeesDTO))
	})
	return _c
}

func (_c *IEmployeeService_GetEmployees_Call) Return(_a0 output.GetEmployeesDTO, _a1 *types.Meta, _a2 error) *IEmployeeService_GetEmployees_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *IEmployeeService_GetEmployees_Call) RunAndReturn(run func(*input.GetEmployeesDTO) (output.GetEmployeesDTO, *types.Meta, error)) *IEmployeeService_GetEmployees_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEmployee provides a mock function with given fields: payload
func (_m *IEmployeeService) UpdateEmployee(payload *input.UpdateEmployeeDTO) error {
	ret := _m.Called(payload)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEmployee")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*input.UpdateEmployeeDTO) error); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IEmployeeService_UpdateEmployee_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEmployee'
type IEmployeeService_UpdateEmployee_Call struct {
	*mock.Call
}

// UpdateEmployee is a helper method to define mock.On call
//   - payload *input.UpdateEmployeeDTO
func (_e *IEmployeeService_Expecter) UpdateEmployee(payload interface{}) *IEmployeeService_UpdateEmployee_Call {
	return &IEmployeeService_UpdateEmployee_Call{Call: _e.mock.On("UpdateEmployee", payload)}
}

func (_c *IEmployeeService_UpdateEmployee_Call) Run(run func(payload *input.UpdateEmployeeDTO)) *IEmployeeService_UpdateEmployee_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*input.UpdateEmployeeDTO))
	})
	return _c
}

func (_c *IEmployeeService_UpdateEmployee_Call) Return(_a0 error) *IEmployeeService_UpdateEmployee_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IEmployeeService_UpdateEmployee_Call) RunAndReturn(run func(*input.UpdateEmployeeDTO) error) *IEmployeeService_UpdateEmployee_Call {
	_c.Call.Return(run)
	return _c
}

// NewIEmployeeService creates a new instance of IEmployeeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIEmployeeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IEmployeeService {
	mock := &IEmployeeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
